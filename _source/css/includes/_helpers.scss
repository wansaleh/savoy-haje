// Extra small screen / phone
//** Deprecated `$screen-xs` as of v3.0.1
$screen-xs:                  480px !default;
//** Deprecated `$screen-xs-min` as of v3.2.0
$screen-xs-min:              $screen-xs !default;
//** Deprecated `$screen-phone` as of v3.0.1
$screen-phone:               $screen-xs-min !default;

// Small screen / tablet
//** Deprecated `$screen-sm` as of v3.0.1
$screen-sm:                  768px !default;
$screen-sm-min:              $screen-sm !default;
//** Deprecated `$screen-tablet` as of v3.0.1
$screen-tablet:              $screen-sm-min !default;

// Medium screen / desktop
//** Deprecated `$screen-md` as of v3.0.1
$screen-md:                  992px !default;
$screen-md-min:              $screen-md !default;
//** Deprecated `$screen-desktop` as of v3.0.1
$screen-desktop:             $screen-md-min !default;

// Large screen / wide desktop
//** Deprecated `$screen-lg` as of v3.0.1
$screen-lg:                  1200px !default;
$screen-lg-min:              $screen-lg !default;
//** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop:          $screen-lg-min !default;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1) !default;
$screen-sm-max:              ($screen-md-min - 1) !default;
$screen-md-max:              ($screen-lg-min - 1) !default;

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xs {
      @media (max-width: $screen-xs-max) { @content; }       // Mobile Devices
    }

    @else if $min == sm {
      @media (min-width: $screen-sm-min) { @content; }       // Tablet Devices
    }

    @else if $min == md {
      @media (min-width: $screen-md-min) { @content; }       // Desktops
    }

    @else if $min == lg {
      @media (min-width: $screen-lg-min) { @content; }      // Widescreen Desktops
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}

@for $i from 0 through 10 {
  .opacity-#{$i * 10} {
    opacity: $i / 10;
  }
}

// @mixin clearfix {
//   &:after {
//     visibility: hidden;
//     display: block;
//     font-size: 0;
//     content: ' ';
//     clear: both;
//     height: 0;
//   }
// }

@mixin bg-overlay($background: #000, $opacity: 0.5) {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $background;
    opacity: $opacity;
  }
}

@mixin swatch-color-style {
  font-size: 0;
  border-color: rgba(#000, .3);
  box-shadow: inset 0 0 10px rgba(#000, .2);

  &:before {
    content: "";
    position: absolute;
    top: -90%;
    left: -60%;
    width: 150%;
    height: 150%;
    background-color: #fff;
    // background-image: radial-gradient(circle, rgba(#fff, 1) 30%, rgba(#fff, 0) 100%);
    border-radius: 100%;
    opacity: .1;
    transition: all .3s ease
  }

  &:hover,
  &.active {
    box-shadow: none;
    &:before {
      opacity: 0;
    }
  }
}
